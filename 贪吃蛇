#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<string.h>
#include<time.h>
#include<conio.h>
#include<Windows.h>
#include<math.h>
#define maxn 20
#define W   20  //宽
#define H   20   //高
int speed = 200;
#define ABS(x) (((x)>0)?(x):-(x))
#define left 75
#define up 72
#define right 77
#define down 80
#define N 200 //最长长度
#define ABS(x) (((x)>0)?(x):-(x))

int dx[4] = { -1,1,0,0 };
int dy[4] = { 0,0,-1,1 };   //上下左右
using namespace std;
struct snake   //用数组表示
{
	int x;   //横轴  蛇节点
	int y;  //纵轴
	int now;  //现状
}; //蛇de节点   

char map[maxn][maxn];    //地图
snake s[N];    //蛇

int head_i=0, head_j=0; 
int snake_length = 1;
int point_i=0, point_j=0;   //食物坐标
int yes = 0;  //当前是否需要食物
int c=72;  //当前动作

void eat_food();
void show();

//初始化
void initial()
{  //初始化地图 食物 蛇  
	memset(map, ' ', maxn * maxn);
	memset(s, ' ', snake_length);
	snake_length = 1;
	srand((unsigned)time(0));
	head_i = (rand() % (maxn - 3)) + 1;
	head_j= (rand() % (maxn - 3)) + 1;
	point_i= (rand() % (maxn - 3)) + 1;
	point_j= (rand() % (maxn - 3)) + 1;
	map[head_i][head_j] = '$';
	map[point_i][point_j] = '*';
	int i = 0, j = 0;
	s[0].x = head_i;
	s[0].y = head_j;
	for (i = 0; i < maxn; i++)
	{
		for (j = 0; j < maxn; j++)
		{
			if (i == 0 || i == maxn - 1 || j == 0 || j == maxn - 1)
				map[i][j]='#';
		}
	}
}

//食物初始化
void food_init()
{
	if (yes == 1)
	{
		srand((unsigned)time(0));
		point_i = (rand() % (maxn - 3)) + 1;
		point_j = (rand() % (maxn - 3)) + 1;
		map[point_i][point_j] = '*';
		yes = 0;
	}
}

//判定失败
int fail()
{
	if (head_i <= 0 || head_i >= maxn - 1 || head_j <= 0 || head_j >= maxn - 1)
	{
	
		cout << " 撞到墙  失败！" << endl;
		system("pause");
		return 1;
	}
	int i = 1;
	if (snake_length >=5)
	{
		for (i = 1; i < snake_length; i++)
		{
			if (s[i].x == head_i && s[i].y == head_j)
			{
				
				cout << "吃到自己 失败！" << endl;
				system("pause");
				return 1;
			}
		}
	}
	return 0; //继续
}

//移动   
void move(int c)
{
	int b = 0;
	int k = -1;
	while (!fail())
	{
		if (_kbhit())
		{
			b = _getch();
			if (b == 224)
				b = _getch();
			if (snake_length > 1)
			{
				if (ABS(b - c) == 8 || ABS(b - c) == 2)  //不能反向
					b = c;
			}
			c = b;
		}
		switch (c)
		{
		case 72: k = 0; break;
		case 80: k = 1; break;
		case 75: k = 2; break;
		case 77: k = 3; break;
		}
		head_i += dx[ABS(k)];
		head_j += dy[ABS(k)];
		map[head_i][head_j] = '$';
		if (snake_length > 1)
		{
			int i = snake_length - 1;
			map[s[snake_length - 1].x][s[snake_length - 1].y] = ' '; //及时刷新
			for (i = snake_length - 1; i > 0; i--)
			{
				s[i].x = s[i - 1].x;
				s[i].y = s[i - 1].y;
				map[s[i].x][s[i].y] = '@';
			}
		}
		else map[s[0].x][s[0].y] = ' ';
		s[0].x = head_i;
		s[0].y = head_j;  //头部移动
		
		eat_food();
		Sleep(speed);
		show();
	}

}

//吃东西
void eat_food()
{
	if (head_i == point_i && head_j == point_j)
	{  //吃到了 在尾部加结点
		snake_length++;
		//知道了尾部节点与它的前面节点运动方向
		if (s[snake_length - 1].x == s[snake_length - 2].x+1 && s[snake_length - 1].y == s[snake_length - 2].y)
		{  //此节点在尾部节点上
			s[snake_length].x += dx[1];
			s[snake_length].y += dy[1];
		}
		if (s[snake_length - 1].x == s[snake_length - 2].x-1 && s[snake_length - 1].y == s[snake_length - 2].y)
		{ //此节点在尾部节点下
			s[snake_length].x += dx[0];
			s[snake_length].y += dy[0];
		}
		if (s[snake_length - 1].x == s[snake_length - 2].x && s[snake_length - 1].y == s[snake_length - 2].y+1)
		{ //此节点在尾部节点左
			s[snake_length].x += dx[3];
			s[snake_length].y += dy[3];
		}
		if (s[snake_length - 1].x == s[snake_length - 2].x && s[snake_length - 1].y == s[snake_length - 2].y-1)
		{ //此节点在尾部节点右
			s[snake_length].x += dx[2];
			s[snake_length].y += dy[2];
		}
		yes = 1;
		food_init();
	}
}

//全局刷新
void show()
{
	system("cls");
	int i = 0, j = 0;
	for (i = 0; i < maxn; i++)
	{
		for (j = 0; j < maxn; j++)
		{
			cout << map[i][j];
		}
		cout << endl;
	}

}

//运行游戏
void run_game()
{
	initial();
	show();
	char b;
		c = _getch();
		if (c == 224)
			c = _getch();	
		move(c);
		eat_food();
		Sleep(speed);
		show();

}

int main()
{
	
	int i=0,j=0;
	int k1 = 0;
	while (1)
	{
		system("cls");
		cout << "贪吃蛇游戏" << endl;
		cout << "1.开始游戏" << endl;
		cout << "2.设置" << endl;
		cout << "3.退出" << endl;
		cin >> i;
		system("cls");
		if (i == 1)
		{
			run_game();
		}
		else if (i == 2)
		{
			int k2 = 0;
			while (1)
			{
				cout << "请选择难度系数" << endl;
				cout << "1.简单" << endl;
				cout << "2.普通" << endl;
				cout << "3.困难" << endl;
				cout << "4.返回" << endl;
				cin >> j;
				switch (j)
				{
				case 1: speed = 300; break;
				case 2: speed = 200; break;
				case 3: speed = 100; break;
				case 4: k2 = 1; break;
				default: cout << "输入错误" << endl;
				}
				if (k2 == 1) break;
			}
		}
		else if (i == 3)
		{
			cout << "成功退出" << endl;
			k1 = 1;
		}
		if (k1 == 1) break;
	}
	return 0;
}
